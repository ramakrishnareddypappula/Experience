
Pod represents the single instance of containerized application.
Deployment manages and scales multiple instances of pod(replicas), brings the application to desired state, and manages resources.

If a pod goes away, kubernetes again creates it with the help of deployment and maintain replicas.


sample deployment type:
    controlplane $ kubectl create deploy demo --image=nginx  --dry-run=client -oyaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          creationTimestamp: null
          labels:
            app: demo
          name: demo
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: demo
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: demo
            spec:
              containers:
              - image: nginx
                name: nginx
                resources: {}
        status: {}
    controlplane $

    change the replicas to 3 and use the below command to deploy.
    > kubectl apply -f d.yaml  # save the above yaml to d.yaml file.

    > kubectl get pods # we will see 3 pods. Even if we delete 1 pod, k8s will create 1 so that 3 are all present.

    > kubectl get deployment  # This will have only demo name
    > kubectl get replicaset  # demo-<replicaset hash>
    > kubectl get pods        # demo-<replicaset hash>-<deployment hash>

    > kubectl scale deploy demo --replicas 5  # To manually  scale the pods to 5.

    > kubectl edit deploy demo # to change the deployment file. Any changes done here are directly impact, no other command is required.

    > kubectl describe deploy demo  # to check the status and replicaset changes.

    > kubectl rollout status deploy  demo   # during rollout To see if there is any problem in image or replicaset.

    > kubectl set image deployment/demo nginx=nginx:1.15.2 --record    # to update the image version.

    If the version bad version. Then we can rollback
    > kubectl rollout undo deployment demo --to-revision 4
    > kubectl rollout history  deploy  demo
    > kubectl get pods

    > kubectl delete deploy demo --force  # delete the deployment.

    







